# Generated by Django 4.2.7 on 2025-10-22 10:23

from django.db import migrations, models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=255, unique=True)),
                ("password", models.CharField(max_length=255)),
                ("full_name", models.CharField(max_length=255)),
                ("phone", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("ADMIN", "Administrator"),
                            ("PD", "Procurement Director"),
                            ("PM", "Project Manager"),
                            ("COORDINATOR", "Coordinator"),
                            ("PFM", "Finance Manager"),
                            ("SBC", "Subcontractor"),
                            ("IT", "IT Support"),
                        ],
                        db_index=True,
                        default="PM",
                        max_length=50,
                    ),
                ),
                ("can_upload_files", models.BooleanField(default=False)),
                ("can_trigger_merge", models.BooleanField(default=False)),
                ("can_assign_pos", models.BooleanField(default=False)),
                ("can_view_all_pos", models.BooleanField(default=False)),
                ("can_create_external_po_any", models.BooleanField(default=False)),
                ("can_create_external_po_assigned", models.BooleanField(default=False)),
                ("can_approve_level_1", models.BooleanField(default=False)),
                ("can_approve_level_2", models.BooleanField(default=False)),
                ("can_manage_users", models.BooleanField(default=False)),
                ("can_view_dashboard", models.BooleanField(default=False)),
                ("can_export_data", models.BooleanField(default=False)),
                ("can_view_sbc_work", models.BooleanField(default=False)),
                (
                    "sbc_code",
                    models.CharField(blank=True, max_length=50, null=True, unique=True),
                ),
                (
                    "sbc_company_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_locked", models.BooleanField(default=False)),
                ("email_verified", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "users",
                "indexes": [
                    models.Index(
                        fields=["role", "is_active"], name="idx_user_role_active"
                    )
                ],
            },
        ),
    ]
